// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: AppService.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppService_Auth_FullMethodName              = "/app.AppService/Auth"
	AppService_BucketReset_FullMethodName       = "/app.AppService/BucketReset"
	AppService_AddIpWhitelist_FullMethodName    = "/app.AppService/AddIpWhitelist"
	AppService_DeleteIpWhitelist_FullMethodName = "/app.AppService/DeleteIpWhitelist"
	AppService_AddIpBlacklist_FullMethodName    = "/app.AppService/AddIpBlacklist"
	AppService_DeleteIpBlacklist_FullMethodName = "/app.AppService/DeleteIpBlacklist"
)

// AppServiceClient is the client API for AppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppServiceClient interface {
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Response, error)
	BucketReset(ctx context.Context, in *BucketResetRequest, opts ...grpc.CallOption) (*Response, error)
	AddIpWhitelist(ctx context.Context, in *IpRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteIpWhitelist(ctx context.Context, in *IpRequest, opts ...grpc.CallOption) (*Response, error)
	AddIpBlacklist(ctx context.Context, in *IpRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteIpBlacklist(ctx context.Context, in *IpRequest, opts ...grpc.CallOption) (*Response, error)
}

type appServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppServiceClient(cc grpc.ClientConnInterface) AppServiceClient {
	return &appServiceClient{cc}
}

func (c *appServiceClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, AppService_Auth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) BucketReset(ctx context.Context, in *BucketResetRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, AppService_BucketReset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) AddIpWhitelist(ctx context.Context, in *IpRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, AppService_AddIpWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteIpWhitelist(ctx context.Context, in *IpRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, AppService_DeleteIpWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) AddIpBlacklist(ctx context.Context, in *IpRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, AppService_AddIpBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteIpBlacklist(ctx context.Context, in *IpRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, AppService_DeleteIpBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServiceServer is the server API for AppService service.
// All implementations must embed UnimplementedAppServiceServer
// for forward compatibility.
type AppServiceServer interface {
	Auth(context.Context, *AuthRequest) (*Response, error)
	BucketReset(context.Context, *BucketResetRequest) (*Response, error)
	AddIpWhitelist(context.Context, *IpRequest) (*Response, error)
	DeleteIpWhitelist(context.Context, *IpRequest) (*Response, error)
	AddIpBlacklist(context.Context, *IpRequest) (*Response, error)
	DeleteIpBlacklist(context.Context, *IpRequest) (*Response, error)
	mustEmbedUnimplementedAppServiceServer()
}

// UnimplementedAppServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppServiceServer struct{}

func (UnimplementedAppServiceServer) Auth(context.Context, *AuthRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedAppServiceServer) BucketReset(context.Context, *BucketResetRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BucketReset not implemented")
}
func (UnimplementedAppServiceServer) AddIpWhitelist(context.Context, *IpRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIpWhitelist not implemented")
}
func (UnimplementedAppServiceServer) DeleteIpWhitelist(context.Context, *IpRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIpWhitelist not implemented")
}
func (UnimplementedAppServiceServer) AddIpBlacklist(context.Context, *IpRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIpBlacklist not implemented")
}
func (UnimplementedAppServiceServer) DeleteIpBlacklist(context.Context, *IpRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIpBlacklist not implemented")
}
func (UnimplementedAppServiceServer) mustEmbedUnimplementedAppServiceServer() {}
func (UnimplementedAppServiceServer) testEmbeddedByValue()                    {}

// UnsafeAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServiceServer will
// result in compilation errors.
type UnsafeAppServiceServer interface {
	mustEmbedUnimplementedAppServiceServer()
}

func RegisterAppServiceServer(s grpc.ServiceRegistrar, srv AppServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppService_ServiceDesc, srv)
}

func _AppService_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_BucketReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).BucketReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_BucketReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).BucketReset(ctx, req.(*BucketResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_AddIpWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).AddIpWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_AddIpWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).AddIpWhitelist(ctx, req.(*IpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteIpWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteIpWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_DeleteIpWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteIpWhitelist(ctx, req.(*IpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_AddIpBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).AddIpBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_AddIpBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).AddIpBlacklist(ctx, req.(*IpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteIpBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteIpBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_DeleteIpBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteIpBlacklist(ctx, req.(*IpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppService_ServiceDesc is the grpc.ServiceDesc for AppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.AppService",
	HandlerType: (*AppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _AppService_Auth_Handler,
		},
		{
			MethodName: "BucketReset",
			Handler:    _AppService_BucketReset_Handler,
		},
		{
			MethodName: "AddIpWhitelist",
			Handler:    _AppService_AddIpWhitelist_Handler,
		},
		{
			MethodName: "DeleteIpWhitelist",
			Handler:    _AppService_DeleteIpWhitelist_Handler,
		},
		{
			MethodName: "AddIpBlacklist",
			Handler:    _AppService_AddIpBlacklist_Handler,
		},
		{
			MethodName: "DeleteIpBlacklist",
			Handler:    _AppService_DeleteIpBlacklist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "AppService.proto",
}
